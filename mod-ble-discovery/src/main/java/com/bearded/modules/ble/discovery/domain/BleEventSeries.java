package com.bearded.modules.ble.discovery.domain;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table BLE_EVENT_SERIES.
 */
public class BleEventSeries {

    private Long id;
    private Long bleDeviceId;
    /**
     * Not-null value.
     */
    private java.util.Date startTimestamp;
    private java.util.Date endTimestamp;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient BleEventSeriesDao myDao;

    private BleDevice bleDevice;
    private Long bleDevice__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BleEventSeries() {
    }

    public BleEventSeries(Long id) {
        this.id = id;
    }

    public BleEventSeries(Long id, Long bleDeviceId, java.util.Date startTimestamp, java.util.Date endTimestamp) {
        this.id = id;
        this.bleDeviceId = bleDeviceId;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBleEventSeriesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getBleDeviceId() {
        return bleDeviceId;
    }

    public void setBleDeviceId(Long bleDeviceId) {
        this.bleDeviceId = bleDeviceId;
    }

    /**
     * Not-null value.
     */
    public java.util.Date getStartTimestamp() {
        return startTimestamp;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setStartTimestamp(java.util.Date startTimestamp) {
        this.startTimestamp = startTimestamp;
    }

    public java.util.Date getEndTimestamp() {
        return endTimestamp;
    }

    public void setEndTimestamp(java.util.Date endTimestamp) {
        this.endTimestamp = endTimestamp;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public BleDevice getBleDevice() {
        Long __key = this.bleDeviceId;
        if (bleDevice__resolvedKey == null || !bleDevice__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BleDeviceDao targetDao = daoSession.getBleDeviceDao();
            BleDevice bleDeviceNew = targetDao.load(__key);
            synchronized (this) {
                bleDevice = bleDeviceNew;
                bleDevice__resolvedKey = __key;
            }
        }
        return bleDevice;
    }

    public void setBleDevice(BleDevice bleDevice) {
        synchronized (this) {
            this.bleDevice = bleDevice;
            bleDeviceId = bleDevice == null ? null : bleDevice.getId();
            bleDevice__resolvedKey = bleDeviceId;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
