package com.bearded.modules.ble.discovery.domain;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
import android.support.annotation.NonNull;

import com.bearded.modules.ble.discovery.persistence.dao.BleEventEntityDao;
import com.bearded.modules.ble.discovery.persistence.dao.BleEventSeriesEntityDao;
import com.bearded.modules.ble.discovery.persistence.dao.DaoSession;
import com.bearded.modules.ble.discovery.persistence.dao.LocationEntityDao;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

import static com.bearded.modules.ble.discovery.persistence.dao.BleEventEntityDao.Properties.BinSize;
import static com.bearded.modules.ble.discovery.persistence.dao.BleEventEntityDao.Properties.EndTimestamp;
import static com.bearded.modules.ble.discovery.persistence.dao.BleEventEntityDao.Properties.MedianReceivedSignalStrength;
import static com.bearded.modules.ble.discovery.persistence.dao.BleEventEntityDao.Properties.StartTimestamp;

// KEEP INCLUDES END

/**
 * Entity mapped to table BleEvent.
 */
public class BleEventEntity implements com.bearded.common.persistance.ParseableJson, java.lang.Comparable<BleEventEntity> {

    private Long id;
    private long eventSeriesId;
    private Long location_id;
    /**
     * Not-null value.
     */
    private String startTimestamp;
    /**
     * Not-null value.
     */
    private String endTimestamp;
    private byte medianReceivedSignalStrength;
    private short binSize;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient BleEventEntityDao myDao;

    private BleEventSeriesEntity bleEventSeriesEntity;
    private Long bleEventSeriesEntity__resolvedKey;

    private LocationEntity locationEntity;
    private Long locationEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BleEventEntity() {
    }

    public BleEventEntity(Long id) {
        this.id = id;
    }

    public BleEventEntity(Long id, long eventSeriesId, Long location_id, String startTimestamp, String endTimestamp, byte medianReceivedSignalStrength, short binSize) {
        this.id = id;
        this.eventSeriesId = eventSeriesId;
        this.location_id = location_id;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
        this.medianReceivedSignalStrength = medianReceivedSignalStrength;
        this.binSize = binSize;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBleEventEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getEventSeriesId() {
        return eventSeriesId;
    }

    public void setEventSeriesId(long eventSeriesId) {
        this.eventSeriesId = eventSeriesId;
    }

    public Long getLocation_id() {
        return location_id;
    }

    public void setLocation_id(Long location_id) {
        this.location_id = location_id;
    }

    /**
     * Not-null value.
     */
    public String getStartTimestamp() {
        return startTimestamp;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setStartTimestamp(String startTimestamp) {
        this.startTimestamp = startTimestamp;
    }

    /**
     * Not-null value.
     */
    public String getEndTimestamp() {
        return endTimestamp;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setEndTimestamp(String endTimestamp) {
        this.endTimestamp = endTimestamp;
    }

    public byte getMedianReceivedSignalStrength() {
        return medianReceivedSignalStrength;
    }

    public void setMedianReceivedSignalStrength(byte medianReceivedSignalStrength) {
        this.medianReceivedSignalStrength = medianReceivedSignalStrength;
    }

    public short getBinSize() {
        return binSize;
    }

    public void setBinSize(short binSize) {
        this.binSize = binSize;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public BleEventSeriesEntity getBleEventSeriesEntity() {
        long __key = this.eventSeriesId;
        if (bleEventSeriesEntity__resolvedKey == null || !bleEventSeriesEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BleEventSeriesEntityDao targetDao = daoSession.getBleEventSeriesEntityDao();
            BleEventSeriesEntity bleEventSeriesEntityNew = targetDao.load(__key);
            synchronized (this) {
                bleEventSeriesEntity = bleEventSeriesEntityNew;
                bleEventSeriesEntity__resolvedKey = __key;
            }
        }
        return bleEventSeriesEntity;
    }

    public void setBleEventSeriesEntity(BleEventSeriesEntity bleEventSeriesEntity) {
        if (bleEventSeriesEntity == null) {
            throw new DaoException("To-one property 'eventSeriesId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.bleEventSeriesEntity = bleEventSeriesEntity;
            eventSeriesId = bleEventSeriesEntity.getId();
            bleEventSeriesEntity__resolvedKey = eventSeriesId;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public LocationEntity getLocationEntity() {
        Long __key = this.location_id;
        if (locationEntity__resolvedKey == null || !locationEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationEntityDao targetDao = daoSession.getLocationEntityDao();
            LocationEntity locationEntityNew = targetDao.load(__key);
            synchronized (this) {
                locationEntity = locationEntityNew;
                locationEntity__resolvedKey = __key;
            }
        }
        return locationEntity;
    }

    public void setLocationEntity(LocationEntity locationEntity) {
        synchronized (this) {
            this.locationEntity = locationEntity;
            location_id = locationEntity == null ? null : locationEntity.getId();
            locationEntity__resolvedKey = location_id;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    /**
     * {@inheritDoc}
     * NOTE: This implementation compares the two elements comparing its start timestamp.
     */
    @Override
    public int compareTo(@NonNull final BleEventEntity eventEntity) {
        return this.startTimestamp.compareTo(eventEntity.startTimestamp);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @NonNull
    public JsonObject toJsonObject() {
        final JsonObject bleEvent = new JsonObject();
        bleEvent.add(StartTimestamp.name, new JsonPrimitive(this.startTimestamp));
        bleEvent.add(EndTimestamp.name, new JsonPrimitive(this.endTimestamp));
        bleEvent.add(MedianReceivedSignalStrength.name, new JsonPrimitive(this.medianReceivedSignalStrength));
        bleEvent.add(BinSize.name, new JsonPrimitive(this.binSize));
        return bleEvent;
    }
    // KEEP METHODS END

}
