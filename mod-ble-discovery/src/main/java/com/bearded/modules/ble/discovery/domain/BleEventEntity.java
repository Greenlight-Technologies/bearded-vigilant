package com.bearded.modules.ble.discovery.domain;

import com.bearded.modules.ble.discovery.domain.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table BleEvent.
 */
public class BleEventEntity {

    private Long id;
    private Long bleDevice;
    private Long eventSeries;
    /** Not-null value. */
    private java.util.Date startTimestamp;
    private java.util.Date endTimestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BleEventEntityDao myDao;

    private BleDeviceEntity bleDeviceEntity;
    private Long bleDeviceEntity__resolvedKey;

    private BleEventSeriesEntity bleEventSeriesEntity;
    private Long bleEventSeriesEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BleEventEntity() {
    }

    public BleEventEntity(Long id) {
        this.id = id;
    }

    public BleEventEntity(Long id, Long bleDevice, Long eventSeries, java.util.Date startTimestamp, java.util.Date endTimestamp) {
        this.id = id;
        this.bleDevice = bleDevice;
        this.eventSeries = eventSeries;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBleEventEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getBleDevice() {
        return bleDevice;
    }

    public void setBleDevice(Long bleDevice) {
        this.bleDevice = bleDevice;
    }

    public Long getEventSeries() {
        return eventSeries;
    }

    public void setEventSeries(Long eventSeries) {
        this.eventSeries = eventSeries;
    }

    /** Not-null value. */
    public java.util.Date getStartTimestamp() {
        return startTimestamp;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartTimestamp(java.util.Date startTimestamp) {
        this.startTimestamp = startTimestamp;
    }

    public java.util.Date getEndTimestamp() {
        return endTimestamp;
    }

    public void setEndTimestamp(java.util.Date endTimestamp) {
        this.endTimestamp = endTimestamp;
    }

    /** To-one relationship, resolved on first access. */
    public BleDeviceEntity getBleDeviceEntity() {
        Long __key = this.bleDevice;
        if (bleDeviceEntity__resolvedKey == null || !bleDeviceEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BleDeviceEntityDao targetDao = daoSession.getBleDeviceEntityDao();
            BleDeviceEntity bleDeviceEntityNew = targetDao.load(__key);
            synchronized (this) {
                bleDeviceEntity = bleDeviceEntityNew;
            	bleDeviceEntity__resolvedKey = __key;
            }
        }
        return bleDeviceEntity;
    }

    public void setBleDeviceEntity(BleDeviceEntity bleDeviceEntity) {
        synchronized (this) {
            this.bleDeviceEntity = bleDeviceEntity;
            bleDevice = bleDeviceEntity == null ? null : bleDeviceEntity.getId();
            bleDeviceEntity__resolvedKey = bleDevice;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BleEventSeriesEntity getBleEventSeriesEntity() {
        Long __key = this.eventSeries;
        if (bleEventSeriesEntity__resolvedKey == null || !bleEventSeriesEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BleEventSeriesEntityDao targetDao = daoSession.getBleEventSeriesEntityDao();
            BleEventSeriesEntity bleEventSeriesEntityNew = targetDao.load(__key);
            synchronized (this) {
                bleEventSeriesEntity = bleEventSeriesEntityNew;
            	bleEventSeriesEntity__resolvedKey = __key;
            }
        }
        return bleEventSeriesEntity;
    }

    public void setBleEventSeriesEntity(BleEventSeriesEntity bleEventSeriesEntity) {
        synchronized (this) {
            this.bleEventSeriesEntity = bleEventSeriesEntity;
            eventSeries = bleEventSeriesEntity == null ? null : bleEventSeriesEntity.getId();
            bleEventSeriesEntity__resolvedKey = eventSeries;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
