package com.bearded.modules.sensor.light.persistence.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.bearded.modules.sensor.light.domain.LightMeasurementEntity;
import com.bearded.modules.sensor.light.domain.LightMeasurementSeriesEntity;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table LightMeasurement.
 */
public class LightMeasurementEntityDao extends AbstractDao<LightMeasurementEntity, Long> {

    public static final String TABLENAME = "LightMeasurement";
    private DaoSession daoSession;

    ;
    private String selectDeep;


    public LightMeasurementEntityDao(DaoConfig config) {
        super(config);
    }

    public LightMeasurementEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'LightMeasurement' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEASUREMENT_SERIES_ENTITY' INTEGER," + // 1: measurementSeriesEntity
                "'MID_LIGHT_VALUE' REAL NOT NULL ," + // 2: midLightValue
                "'START_TIMESTAMP' TEXT NOT NULL ," + // 3: startTimestamp
                "'END_TIMESTAMP' TEXT NOT NULL ," + // 4: endTimestamp
                "'BIN_SIZE' INTEGER NOT NULL );"); // 5: binSize
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LightMeasurement'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, LightMeasurementEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long measurementSeriesEntity = entity.getMeasurementSeriesEntity();
        if (measurementSeriesEntity != null) {
            stmt.bindLong(2, measurementSeriesEntity);
        }
        stmt.bindDouble(3, entity.getMidLightValue());
        stmt.bindString(4, entity.getStartTimestamp());
        stmt.bindString(5, entity.getEndTimestamp());
        stmt.bindLong(6, entity.getBinSize());
    }

    @Override
    protected void attachEntity(LightMeasurementEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public LightMeasurementEntity readEntity(Cursor cursor, int offset) {
        LightMeasurementEntity entity = new LightMeasurementEntity( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // measurementSeriesEntity
                cursor.getFloat(offset + 2), // midLightValue
                cursor.getString(offset + 3), // startTimestamp
                cursor.getString(offset + 4), // endTimestamp
                cursor.getShort(offset + 5) // binSize
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, LightMeasurementEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeasurementSeriesEntity(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMidLightValue(cursor.getFloat(offset + 2));
        entity.setStartTimestamp(cursor.getString(offset + 3));
        entity.setEndTimestamp(cursor.getString(offset + 4));
        entity.setBinSize(cursor.getShort(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(LightMeasurementEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(LightMeasurementEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLightMeasurementSeriesEntityDao().getAllColumns());
            builder.append(" FROM LightMeasurement T");
            builder.append(" LEFT JOIN LightMeasurementSeries T0 ON T.'MEASUREMENT_SERIES_ENTITY'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected LightMeasurementEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        LightMeasurementEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LightMeasurementSeriesEntity lightMeasurementSeriesEntity = loadCurrentOther(daoSession.getLightMeasurementSeriesEntityDao(), cursor, offset);
        entity.setLightMeasurementSeriesEntity(lightMeasurementSeriesEntity);

        return entity;
    }

    public LightMeasurementEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<LightMeasurementEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LightMeasurementEntity> list = new ArrayList<LightMeasurementEntity>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<LightMeasurementEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<LightMeasurementEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity LightMeasurementEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MeasurementSeriesEntity = new Property(1, Long.class, "measurementSeriesEntity", false, "MEASUREMENT_SERIES_ENTITY");
        public final static Property MidLightValue = new Property(2, float.class, "midLightValue", false, "MID_LIGHT_VALUE");
        public final static Property StartTimestamp = new Property(3, String.class, "startTimestamp", false, "START_TIMESTAMP");
        public final static Property EndTimestamp = new Property(4, String.class, "endTimestamp", false, "END_TIMESTAMP");
        public final static Property BinSize = new Property(5, short.class, "binSize", false, "BIN_SIZE");
    }

}
