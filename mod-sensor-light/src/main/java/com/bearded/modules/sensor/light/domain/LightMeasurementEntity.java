package com.bearded.modules.sensor.light.domain;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

import android.support.annotation.NonNull;

import com.bearded.modules.sensor.light.persistence.dao.DaoSession;
import com.bearded.modules.sensor.light.persistence.dao.LightMeasurementEntityDao;
import com.bearded.modules.sensor.light.persistence.dao.LightMeasurementSeriesEntityDao;
import com.google.gson.JsonObject;

import de.greenrobot.dao.DaoException;

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table LightMeasurement.
 */
public class LightMeasurementEntity implements com.bearded.common.database.ParseableJson, java.lang.Comparable<LightMeasurementEntity> {

    private Long id;
    private Long measurementSeriesEntity;
    private float midLightValue;
    /**
     * Not-null value.
     */
    private String startTimestamp;
    /**
     * Not-null value.
     */
    private String endTimestamp;
    private short binSize;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient LightMeasurementEntityDao myDao;

    private LightMeasurementSeriesEntity lightMeasurementSeriesEntity;
    private Long lightMeasurementSeriesEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LightMeasurementEntity() {
    }

    public LightMeasurementEntity(Long id) {
        this.id = id;
    }

    public LightMeasurementEntity(Long id, Long measurementSeriesEntity, float midLightValue, String startTimestamp, String endTimestamp, short binSize) {
        this.id = id;
        this.measurementSeriesEntity = measurementSeriesEntity;
        this.midLightValue = midLightValue;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
        this.binSize = binSize;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLightMeasurementEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMeasurementSeriesEntity() {
        return measurementSeriesEntity;
    }

    public void setMeasurementSeriesEntity(Long measurementSeriesEntity) {
        this.measurementSeriesEntity = measurementSeriesEntity;
    }

    public float getMidLightValue() {
        return midLightValue;
    }

    public void setMidLightValue(float midLightValue) {
        this.midLightValue = midLightValue;
    }

    /**
     * Not-null value.
     */
    public String getStartTimestamp() {
        return startTimestamp;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setStartTimestamp(String startTimestamp) {
        this.startTimestamp = startTimestamp;
    }

    /**
     * Not-null value.
     */
    public String getEndTimestamp() {
        return endTimestamp;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setEndTimestamp(String endTimestamp) {
        this.endTimestamp = endTimestamp;
    }

    public short getBinSize() {
        return binSize;
    }

    public void setBinSize(short binSize) {
        this.binSize = binSize;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public LightMeasurementSeriesEntity getLightMeasurementSeriesEntity() {
        Long __key = this.measurementSeriesEntity;
        if (lightMeasurementSeriesEntity__resolvedKey == null || !lightMeasurementSeriesEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LightMeasurementSeriesEntityDao targetDao = daoSession.getLightMeasurementSeriesEntityDao();
            LightMeasurementSeriesEntity lightMeasurementSeriesEntityNew = targetDao.load(__key);
            synchronized (this) {
                lightMeasurementSeriesEntity = lightMeasurementSeriesEntityNew;
                lightMeasurementSeriesEntity__resolvedKey = __key;
            }
        }
        return lightMeasurementSeriesEntity;
    }

    public void setLightMeasurementSeriesEntity(LightMeasurementSeriesEntity lightMeasurementSeriesEntity) {
        synchronized (this) {
            this.lightMeasurementSeriesEntity = lightMeasurementSeriesEntity;
            measurementSeriesEntity = lightMeasurementSeriesEntity == null ? null : lightMeasurementSeriesEntity.getId();
            lightMeasurementSeriesEntity__resolvedKey = measurementSeriesEntity;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    /**
     * {@inheritDoc}
     * NOTE: This implementation compares the two elements comparing its start timestamp.
     */
    @Override
    public int compareTo(@NonNull final LightMeasurementEntity another) {
        return this.startTimestamp.compareTo(another.startTimestamp);
    }

    /**
     * {@inheritDoc}
     */
    @NonNull
    @Override
    public JsonObject toJsonObject() {
        return null;
    }
    // KEEP METHODS END

}
